#include <bits/stdc++.h>
#include "ortools/linear_solver/linear_solver.h"
using namespace std;
using namespace operations_research;

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);

  int t;
  cin >> t;
  double total_throughput_all = 0.0;

  for (int tc = 0; tc < t; ++tc) {
    int n, m, F;
    cin >> n >> m >> F;
    vector<tuple<int,int,double>> undirected_edges(m);
    for (int i = 0; i < m; ++i) {
      cin >> get<0>(undirected_edges[i]) >> get<1>(undirected_edges[i]) >> get<2>(undirected_edges[i]);
    }
    vector<pair<int,int>> sd(F);
    for (int k = 0; k < F; ++k) cin >> sd[k].first >> sd[k].second;

    // Build directed edges
    vector<pair<int,int>> edges;
    vector<double> capacity;
    edges.reserve(2*m);
    capacity.reserve(2*m);
    for (auto &e : undirected_edges) {
      int u, v; double cap;
      tie(u, v, cap) = e;
      edges.emplace_back(u, v);
      capacity.push_back(cap);
      edges.emplace_back(v, u);
      capacity.push_back(cap);
    }
    int E = edges.size();

    // Big M for f bound
    double M = 0;
    for (double c : capacity) M = max(M, c);

    // Create solver
    unique_ptr<MPSolver> solver(MPSolver::CreateSolver("CBC_MIXED_INTEGER_PROGRAMMING"));
    if (!solver) return 1;

    // Variables
    vector<vector<const MPVariable*>> x(F, vector<const MPVariable*>(E));
    for (int k = 0; k < F; ++k) {
      for (int e = 0; e < E; ++e) {
        x[k][e] = solver->MakeBoolVar("x_" + to_string(k) + "_" + to_string(e));
      }
    }
    vector<const MPVariable*> z(E);
    for (int e = 0; e < E; ++e) {
      z[e] = solver->MakeBoolVar("z_" + to_string(e));
    }
    vector<const MPVariable*> f(F);
    for (int k = 0; k < F; ++k) {
      f[k] = solver->MakeNumVar(0.0, M, "f_" + to_string(k));
    }

    const double INF = solver->infinity();
    // 1) x[k][e] <= z[e]
    for (int k = 0; k < F; ++k) {
      for (int e = 0; e < E; ++e) {
        auto ct = solver->MakeRowConstraint(-INF, 0.0);
        ct->SetCoefficient(x[k][e], 1);
        ct->SetCoefficient(z[e], -1);
      }
    }
    // 2) z[e] <= sum_k x[k][e]
    for (int e = 0; e < E; ++e) {
      auto ct = solver->MakeRowConstraint(-INF, 0.0);
      ct->SetCoefficient(z[e], 1);
      for (int k = 0; k < F; ++k) ct->SetCoefficient(x[k][e], -1);
    }
    // 3) single transmitter
    for (int v = 1; v <= n; ++v) {
      auto ct = solver->MakeRowConstraint(-INF, 1.0);
      for (int e = 0; e < E; ++e) if (edges[e].first == v) ct->SetCoefficient(z[e], 1);
    }
    // 4) single receiver
    for (int v = 1; v <= n; ++v) {
      auto ct = solver->MakeRowConstraint(-INF, 1.0);
      for (int e = 0; e < E; ++e) if (edges[e].second == v) ct->SetCoefficient(z[e], 1);
    }
    // 5) flow conservation
    for (int k = 0; k < F; ++k) {
      int src = sd[k].first, dst = sd[k].second;
      for (int v = 1; v <= n; ++v) {
        double lb=0, ub=0;
        if (v == src) { lb = 1; ub = 1; }
        else if (v == dst) { lb = -1; ub = -1; }
        auto ct = solver->MakeRowConstraint(lb, ub);
        for (int e = 0; e < E; ++e) {
          if (edges[e].first == v) ct->SetCoefficient(x[k][e], 1);
          if (edges[e].second == v) ct->SetCoefficient(x[k][e], -1);
        }
      }
    }
    // 6) capacity constraint: for each k and e, enforce f[k] <= capacity[e] + M*(1 - x[k][e])
    for (int k = 0; k < F; ++k) {
      for (int e = 0; e < E; ++e) {
        auto ct = solver->MakeRowConstraint(-INF, capacity[e] + M);
        ct->SetCoefficient(f[k], 1);
        ct->SetCoefficient(x[k][e], M);
      }
    }

    // Objective
    auto obj = solver->MutableObjective();
    for (int k = 0; k < F; ++k) obj->SetCoefficient(f[k], 1);
    obj->SetMaximization();

    // Solve
    if (solver->Solve() != MPSolver::OPTIMAL) {
      cerr << "No optimal solution\n";
      return 1;
    }

    // Output
    vector<pair<int,int>> used;
    for (int e = 0; e < E; ++e) if (z[e]->solution_value() > 0.5) used.push_back(edges[e]);
    cout << used.size() << '\n';
    for (auto &p : used) cout << p.first << ' ' << p.second << '\n';
    double sum_th = 0;
    for (int k = 0; k < F; ++k) {
      double fk = f[k]->solution_value(); sum_th += fk;
      if (fk < 1e-9) {
        cout << "0 0\n";
      } else {
        // reconstruct path
        vector<int> path;
        int cur = sd[k].first;
        path.push_back(cur);
        while (cur != sd[k].second) {
          for (int e = 0; e < E; ++e) {
            if (edges[e].first == cur && x[k][e]->solution_value() > 0.5) {
              cur = edges[e].second;
              path.push_back(cur);
              break;
            }
          }
        }
        cout << fk << ' ' << path.size();
        for (int v : path) cout << ' ' << v;
        cout << '\n';
      }
    }
    cout << sum_th << '\n';
    total_throughput_all += sum_th;
  }
  cout << (total_throughput_all / t) << '\n';
  return 0;
}
