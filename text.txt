template <typename T>
void
NixVectorRouting<T>::SetPaths(std::string pathFile)
{
  std::ifstream infile(pathFile);
  if (!infile.is_open())
  {
    NS_LOG_ERROR("Failed to open path file: " << pathFile);
    return;
  }

  std::string line;
  int lineNum = 0;
  while (std::getline(infile, line))
  {
    std::istringstream iss(line);
    int srcId, dstId, pathLen;

    if (!(iss >> srcId >> dstId >> pathLen))
    {
      NS_LOG_WARN("Invalid format at line " << lineNum << ": " << line);
      continue;
    }

    std::vector<int> path;
    int nodeId;
    for (int i = 0; i < pathLen; ++i)
    {
      if (!(iss >> nodeId))
      {
        NS_LOG_WARN("Path too short at line " << lineNum << ": " << line);
        break;
      }
      path.push_back(nodeId);
    }

    if (path.size() != static_cast<size_t>(pathLen))
    {
      NS_LOG_WARN("Path length mismatch at line " << lineNum << ": expected " << pathLen << ", got " << path.size());
      continue;
    }

    m_table[{srcId, dstId}] = path;

    // ✅ 開啟這個輸出可追蹤路徑設定情況
    NS_LOG_INFO("Inserted path from " << srcId << " to " << dstId << " (len=" << pathLen << "): " << pathToString(path));

    ++lineNum;
  }

  NS_LOG_INFO("Total custom paths inserted: " << m_table.size());
}

// 輔助函式，將 vector<int> 轉成字串
std::string
pathToString(const std::vector<int> &path)
{
  std::ostringstream oss;
  for (size_t i = 0; i < path.size(); ++i)
  {
    oss << path[i];
    if (i != path.size() - 1)
      oss << " -> ";
  }
  return oss.str();
}
